# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# GDB settings ---------------------------------------------------------------

set confirm off
set disassembly-flavor intel
set logging file gdb.log
set logging on
#set logging overwrite
set logging redirect off
set prompt \033[31mgdb $ \033[0m
set pagination 0

# ----------------------------------------------------------------------------

set $64BITS=1

define set32bits
    set $64BITS = 0
end

define set64bits
    set $64BITS = 1
end

define setColorBlue 
    echo \033[36m 
end

define setColorBlank
    echo \033[0m
end

# 0x%016lX
define showregsintel64bit 
    printf "rax: %18p   rbx: %18p   rcx: %18p\n", $rax, $rbx, $rcx
    printf "rdx: %18p   rsi: %18p   rdi: %18p\n", $rdx, $rsi, $rdi
    printf "rbp: %18p   rsp: %18p   rip: %18p\n", $rbp, $rsp, $rip
end

# 0x%08X
define showregsintel32bit
    printf "eax: %16p   ebx: %16p   ecx: %16p\n", $eax, $ebx, $ecx 
    printf "edx: %16p   esi: %16p   edi: %16p\n", $edx, $esi, $edi
    printf "ebp: %16p   esp: %16p   eip: %16p\n", $ebp, $esp, $eip
end

define setsmallregisters
	if ($64BITS == 1)
		# from rax
		set $eax = $rax & 0xffffffff
		set $ax = $rax & 0xffff
		set $al = $ax & 0xff
		set $ah = $ax >> 8
		# from rbx
		set $bx = $rbx & 0xffff
		set $bl = $bx & 0xff
		set $bh = $bx >> 8
		# from rcx
		set $ecx = $rcx & 0xffffffff
		set $cx = $rcx & 0xffff
		set $cl = $cx & 0xff
		set $ch = $cx >> 8
		# from rdx
		set $edx = $rdx & 0xffffffff
		set $dx = $rdx & 0xffff
		set $dl = $dx & 0xff
		set $dh = $dx >> 8
		# from rsi
		set $esi = $rsi & 0xffffffff
		set $si = $rsi & 0xffff
		# from rdi
		set $edi = $rdi & 0xffffffff
		set $di = $rdi & 0xffff		
	else
		# from eax
		set $ax = $eax & 0xffff
		set $al = $ax & 0xff
		set $ah = $ax >> 8
		# from ebx
		set $bx = $ebx & 0xffff
		set $bl = $bx & 0xff
		set $bh = $bx >> 8
		# from ecx
		set $cx = $ecx & 0xffff
		set $cl = $cx & 0xff
		set $ch = $cx >> 8
		# from edx
		set $dx = $edx & 0xffff
		set $dl = $dx & 0xff
		set $dh = $dx >> 8
		# from esi
		set $si = $esi & 0xffff
		# from edi
		set $di = $edi & 0xffff	
	end	
end

define printRegisters
    setColorBlue
    printf "--[ REGISTERS ]\n"
    setColorBlank
    if ($64BITS == 0)
        showregsintel32bit
    else
        showregsintel64bit
    end
end

define printFaultingInstruction
    setColorBlue
    printf "\n--[ FAULTING INSTRUCTION ]\n"
    setColorBlank
    if ($64BITS == 0)
        x/i $eip
    else
        x/i $rip
    end
end

def printFrame
    setColorBlue
    printf "\n--[ FRAME ]\n"
    setColorBlank
    frame
end

def printPreDisassembly
    setColorBlue
    printf "\n--[ PRE DISASSEMBLY ]\n"
    setColorBlank
    if ($64BITS == 0)
        x/8i $eip-8
    else
        x/8i $rip-8
    end
end

def printPostDisassembly
    setColorBlue
    printf "\n--[ POST DISASSEMBLY ]\n"
    setColorBlank
    # use $pc
    if ($64BITS == 0) 
        x/8i $eip
    else
        x/8i $rip
    end
end

def printCallStack
    setColorBlue
    printf "\n--[ CALLSTACK ]\n"
    setColorBlank
    bt
    #full
end

def printSource
    setColorBlue
    printf "\n--[ SOURCE ]\n"
    setColorBlank
    l
end

def printJavaScriptStack
    setColorBlue
    printf "\n--[ JAVASCRIPT STACK ]\n"
    setColorBlank
    print DumpJSStack()
end

define getPlatform
    shell echo set \$plat=\"$(uname -m)\" > /tmp/dummy.gdb
    source /tmp/dummy.gdb
end

# def getProgArch
#    lipo -info NightlyDebug.app/Contents/MacOS/firefox
# end


define crashspot
    printf "] Crashspot\n"
    printf "] http://people.mozilla.com/~cdiehl/\n"
    printf "] Copyright (C) Christoph Diehl <cdiehl@mozilla.com>\n\n"
	
    getPlatform
	
    printf "Platform architecture: %s\n", $plat
    show args
    printf "\n"
    
    # p (int)strcmp($plat, "x86_64") ?
	
	# x86_64
    if $plat[0] == 'x' && $plat[1] == '8' && $plat[2] == '6' && $plat[3] == '_' && $plat[4] == '6' && $plat[5] == '4'
        set64bits
    end
    
    # i386
    if $plat[0] == 'i' && $plat[1] == '3' && $plat[2] == '8' && $plat[3] == '6' 
        set32bits
    end
	
    printRegisters
    printFaultingInstruction
    printFrame
    printPostDisassembly
    #thread apply all bt
    printCallStack
    #printJavaScriptStack 
    printSource
end
document crashspot
	Shows compact information about a crash which can be used in bug reports.
end

define assemble
    printf "Press ctrl+d to start and stop. Intel syntax!\n"
    shell nasm -f bin -o /dev/stdout /dev/stdin | od -t x1 -A n
end
document assemble
	Dumps opcode string of entered instructions.
end


# Misc -----------------------------------------------------------------------


define main
    tbreak main
    r
end
document main
	Run program and break on main().
end

define var
    if $argc == 0
        info variables
    end
    if $argc == 1
        info variables $arg0
    end
    if $argc > 1
        help var
    end
end
document var
	Print all global and static variable names (symbols), or those matching REGEXP.
	Usage: var <REGEXP>
end

define lib
    info sharedlibrary
end
	document lib
	Print shared libraries linked to target.
end

define threads
    info threads
end
document threads
	Print threads in target.
end
